return {
	{
		"echasnovski/mini.nvim",
		version = "*",
		event = { "BufReadPost", "BufNewFile" },
		config = function()
			require("mini.surround").setup()
		end,
	},
	{
		"echasnovski/mini.nvim",
		version = "*",
		event = "VimEnter",
		opts = function()
			local val = {
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣀⣠⣤⣤⣤⣤⣤⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠴⠯⠭⣭⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣶⣶⣿⣿⣶⣶⣶⣤⣄⡀⠀⠀⠀⠀⠀",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠿⢯⣭⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀⠀⠀",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣿⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⢀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢐⣛⣛⣻⣛⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⡀",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣭⣭⣭⣭⣭⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠐⣒⣒⣒⣲⣒⣒⣒⣻⣿⣿⣿⣟⣉⣭⣭⣭⣭⣭⣭⣭⣿⣿⣿⣟⣋⣭⣭⣭⣭⣽⣧⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣛⣛⣋⣉⡩⣭⣙⠻⣿⣿⣿⣿⢟⣋⡭⢭⣭⣝⢿⣿⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣛⠛⢞⣛⣶⣾⣿⣿⣿⣿⣧⡹⣿⣿⣿⣷⣾⢟⣡⣿⣿⡟⣯⠻⣿⣷⣾⡿⢋⣾⣿⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⡟⣩⣤⣤⡌⡏⢸⡿⠋⣠⣿⣿⣿⣿⣿⣿⣿",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠶⠾⠶⠄⢿⣿⣿⣿⣿⣿⣿⣿⣷⣮⣭⣽⣭⣥⣾⣿⣿⣿⡇⣿⣷⣭⣭⣭⣵⣾⣿⣿⠀⠀⠀⠀⠀⣸⣿⣿⣿⣿⡟⢰⣿⣿⣿⠇⡅⠈⠀⠾⣿⣿⣿⣿⣿⣿⣿⣿",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣀⣦⠘⣛⣚⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⢻⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣧⡈⠛⢛⣡⣼⡇⢸⣿⣶⣌⣻⣿⣿⣿⣿⣿⡟",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⡆⢙⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡜⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠰⣿⣿⣿⣿⣿⣿⣿⣶⣿⣿⣿⣷⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠨⣭⡅⣤⡬⣭⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣽⣇⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⣦⠙⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠿⠿⠟⢛⣛⣛⣛⣟⣛⣻⣻⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣶⣿⣿⣿⣿⣿⣿⡟⠁⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣟⣛⣛⣻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠀⠀",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⢿⣟⣛⣛⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⠀⠀⠀⠀",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣈⣙⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠛⠿⣿⣿⣿⣿⣿⣿⠿⠟⠉⠀⠀⠀⠀⠀⠀",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠺⣿⣶⣶⣄⣈⣛⣛⣛⣛⣛⣛⣫⣭⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⡀⢼⢿⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣦⣄⡀⢀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠿⠁⠽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⢿⣿⣿⣌⢻⣧⡀⣤⡀⢀⣀⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
				"⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣐⣚⡓⠂⢻⣃⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣌⠻⣿⣿⣆⠻⠧⠹⠷⢼⣿⣿⣆⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
				"⠀⠀⠀⠀⠀⠀⠀⠀⣀⠀⠘⣛⣶⣶⡛⠿⠆⠐⠸⣿⡆⢈⡛⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⢁⣦⡌⢿⣿⣆⠀⠀⠀⠀⠈⢋⣵⣷⣶⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
				"⠀⠀⠀⠀⠀⠀⢠⣬⣭⣭⣤⣬⡍⠉⠁⠀⠀⠀⠀⢻⣷⠘⣿⣶⣬⣍⣛⣛⡛⠛⠛⢛⠋⣩⣴⣿⣿⣿⣌⠻⣿⣆⠀⠀⠀⢀⣼⣿⠟⢋⡅⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
				"⠀⠀⠀⠀⠀⠀⣋⣙⠛⠿⣿⣿⣿⣆⠀⠀⠀⠀⣀⣼⠟⠈⣿⣿⣿⣿⣿⣿⠃⢘⠠⡆⣡⡌⣿⣿⣿⡿⢃⣶⣮⣍⣛⣛⣛⣛⣉⣤⣾⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
				"⠀⠀⠀⠀⠀⢠⣭⣭⣵⣤⣤⣍⠹⠿⠷⠶⠒⢚⣉⣭⣦⣶⣌⠻⢿⣿⣿⣿⣄⠸⣶⣶⣿⠃⣿⠛⣡⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
				"⠀⠀⠀⢠⠀⣺⣿⣿⣿⣿⣿⣿⣿⣷⡟⢻⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣦⡌⠁⣴⣿⠛⣿⣿⠈⡀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
				"⠀⠀⢀⡎⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⢘⡋⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⢀⡘⠿⠿⠛⢋⣴⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⡟⣻⣿⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
				"⠀⠀⠼⠆⠴⠾⠿⠿⢿⣿⣿⣿⣿⣿⣿⠈⢠⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢸⣿⣷⢐⠂⢸⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡏⠘⣰⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
				"⠀⣐⣛⡃⣚⣛⣛⣿⣿⣿⣿⣿⣿⣿⣿⠀⠇⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠈⣿⣿⠈⡃⢸⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣰⣿⣿⣿⣿⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
				"⢐⣚⣒⡂⣒⣓⣶⣶⣿⣿⣿⣿⣿⣿⣏⣀⣐⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⣿⣿⠐⠆⢸⣿⡇⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀",
				"",
			}

			local utils = require("utils.os")

			local _, ret = utils.get_command_output({ "git", "rev-parse", "--show-toplevel" }, vim.loop.cwd())
			local footer_val = {}

			local section = "Git Log"
			local function get_dashboard_git_status()
				local git_cmd = { "git", "status", "-s", "--", "." }
				local output = utils.get_command_output(git_cmd)
				local items = { unpack(output) }

				local longest = 0
				local names = {}

				for _, v in ipairs(items) do
					local len = string.len(v)
					if len > longest then
						longest = len
					end
				end
				for _, v in ipairs(items) do
					local name = {}
					for word in string.gmatch(v, "[^%s]+") do
						table.insert(name, word)
					end
					table.insert(names, name[2] .. string.rep(" ", longest - string.len(name[2])) .. name[1])
				end
				for _, v in ipairs(names) do
					table.insert(footer_val, { name = v, section = section, action = function() end })
				end
			end

			if ret ~= 0 then
				local is_worktree =
					utils.get_command_output({ "git", "rev-parse", "--is-inside-work-tree" }, vim.loop.cwd())
				if is_worktree[1] == "true" then
					get_dashboard_git_status()
				else
					-- set_var('dashboard_custom_footer', {'Not in a git directory'})
					table.insert(footer_val, { { name = "Not in a git directory", section = section } })
				end
			else
				get_dashboard_git_status()
			end

			vim.api.nvim_set_hl(0, "MiniStarterHeader", { link = "Type" })

			return {
				header = table.concat(val, "\n"),
				items = footer_val,
				footer = "",
				content_hooks = { require("mini.starter").gen_hook.aligning("center", "top") },
			}
		end,
		config = function(_, opts)
			require("mini.starter").setup(opts)
		end,
	},
}
